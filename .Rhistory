segmentar_con_hmm <- function(df, n_states = 3, window_size = 3) {
# Verificar columna AccMag
if (!"AccMag" %in% names(df)) {
stop("El dataframe debe contener una columna 'AccMag' previamente calculada.")
}
# --- Enriquecimiento con características estadísticas ---
df$mean_AccMag  <- rollapply(df$AccMag, width = window_size, FUN = mean, fill = NA, align = "right")
df$std_AccMag   <- rollapply(df$AccMag, width = window_size, FUN = sd,   fill = NA, align = "right")
df$min_AccMag   <- rollapply(df$AccMag, width = window_size, FUN = min,  fill = NA, align = "right")
df$max_AccMag   <- rollapply(df$AccMag, width = window_size, FUN = max,  fill = NA, align = "right")
df$range_AccMag <- df$max_AccMag - df$min_AccMag
# Eliminar filas con NA introducidos por la ventana
df_hmm <- na.omit(df)
# --- Configurar y entrenar el modelo HMM ---
mod <- depmix(
list(mean_AccMag ~ 1, std_AccMag ~ 1),
data = df_hmm,
nstates = n_states,
family = list(gaussian(), gaussian())
)
set.seed(42)
fit_mod <- fit(mod, verbose = FALSE)
# --- Predecir secuencia de estados ---
post <- posterior(fit_mod)
df_hmm$EstadoHMM <- post$state
# --- Visualización ---
p <- ggplot(df_hmm, aes(x = Fecha, y = AccMag, color = factor(EstadoHMM))) +
geom_point(size = 1, alpha = 0.8) +
scale_color_brewer(palette = "Set1", name = "Estado HMM") +
labs(
title = paste("AccMag segmentada por HMM (", n_states, " estados)", sep = ""),
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(legend.position = "right")
print(p)
return(df_hmm)
}
#| echo: false
#| message: false
#| warning: false
#| paged-print: false
resultado <- segmentar_con_hmm(aceleracion_1, n_states = 3)
#| echo: false
#| message: false
#| warning: false
#| paged-print: false
resultado <- segmentar_con_hmm(aceleracion_2, n_states = 2)
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.1) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = timestamp, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = timestamp, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = paste("Detección de caminatas (Isolation Forest) -", unique(df_plot$Fecha)),
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.05) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = timestamp, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = timestamp, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = paste("Detección de caminatas (Isolation Forest) -", unique(df_plot$Fecha)),
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest(aceleracion_1)
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.02) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = timestamp, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = timestamp, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = paste("Detección de caminatas (Isolation Forest) -", unique(df_plot$Fecha)),
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest(aceleracion_1)
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.03) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = timestamp, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = timestamp, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = paste("Detección de caminatas (Isolation Forest) -",
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.03) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = timestamp, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = timestamp, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = "Detección de caminatas (Isolation Forest)",
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest(aceleracion_1)
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.04) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = timestamp, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = timestamp, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = "Detección de caminatas (Isolation Forest)",
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest(aceleracion_1)
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.05) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = timestamp, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = timestamp, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = "Detección de caminatas (Isolation Forest)",
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest(aceleracion_1)
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.2) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = timestamp, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = Fecha, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = "Detección de caminatas (Isolation Forest)",
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest(aceleracion_1)
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.2) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = timestamp, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = timestamp, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = "Detección de caminatas (Isolation Forest)",
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest(aceleracion_1)
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.2) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = Fecha, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = Fecha, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = "Detección de caminatas (Isolation Forest)",
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest(aceleracion_1)
detector_caminatas_iforest <- function(df, window_size = 50, contamination = 0.1) {
if (!all(c("timestamp", "AccMag", "Fecha") %in% names(df))) {
stop("El dataframe debe contener las columnas: timestamp, AccMag y Fecha.")
}
# --- Ventanas ---
n_windows <- floor(nrow(df) / window_size)
accmag_vals <- df$AccMag[1:(n_windows * window_size)]
timestamps <- df$timestamp[1:(n_windows * window_size)]
mag_matrix <- matrix(accmag_vals, ncol = window_size, byrow = TRUE)
features <- data.frame(
mean = rowMeans(mag_matrix),
std = apply(mag_matrix, 1, sd)
)
# --- Modelo Isolation Forest con isotree ---
iso_model <- isolation.forest(features, ntrees = 50, sample_size = "auto")
scores <- predict(iso_model, features, type = "score")
threshold <- quantile(scores, 1 - contamination)
labels <- ifelse(scores > threshold, -1, 1)
# Replicar etiquetas para cada muestra
labels_per_sample <- rep(labels, each = window_size)
df_plot <- df[1:length(labels_per_sample), ]
df_plot$anomaly <- labels_per_sample
# --- Gráfico ---
ggplot(df_plot, aes(x = Fecha, y = AccMag)) +
geom_line(color = "steelblue", alpha = 0.7) +
geom_point(
data = subset(df_plot, anomaly == -1),
aes(x = Fecha, y = AccMag),
color = "red", shape = 4, size = 1.5
) +
labs(
title = "Detección de caminatas (Isolation Forest)",
x = "Tiempo",
y = "Magnitud de Aceleración (AccMag)"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
}
detector_caminatas_iforest(aceleracion_1)
detector_caminatas_iforest(aceleracion_2)
detector_caminatas_iforest(aceleracion_2, contamination = 0.05)
detector_caminatas_iforest(aceleracion_2)
